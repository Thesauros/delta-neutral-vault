name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  ANCHOR_VERSION: "0.28.0"
  SOLANA_VERSION: "1.16.0"

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Setup Solana
      uses: solana-labs/setup-solana@v1
      with:
        solana-version: ${{ env.SOLANA_VERSION }}
    
    - name: Setup Anchor
      run: |
        cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
        avm install ${{ env.ANCHOR_VERSION }}
        avm use ${{ env.ANCHOR_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        anchor build
    
    - name: Run tests
      run: |
        anchor test --skip-lint
    
    - name: Run linter
      run: |
        cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Format check
      run: |
        cargo fmt --all -- --check

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Run security audit
      run: |
        cargo audit --version || cargo install cargo-audit
        cargo audit
    
    - name: Run cargo check
      run: cargo check --all-targets --all-features

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Setup Solana
      uses: solana-labs/setup-solana@v1
      with:
        solana-version: ${{ env.SOLANA_VERSION }}
    
    - name: Setup Anchor
      run: |
        cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
        avm install ${{ env.ANCHOR_VERSION }}
        avm use ${{ env.ANCHOR_VERSION }}
    
    - name: Build program
      run: anchor build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: program-build
        path: |
          target/deploy/
          target/idl/
    
    - name: Generate IDL
      run: |
        anchor idl parse --file target/idl/delta_neutral_vault.json src/lib.rs
    
    - name: Upload IDL
      uses: actions/upload-artifact@v3
      with:
        name: program-idl
        path: target/idl/

  deploy-devnet:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: devnet
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Setup Solana
      uses: solana-labs/setup-solana@v1
      with:
        solana-version: ${{ env.SOLANA_VERSION }}
    
    - name: Setup Anchor
      run: |
        cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
        avm install ${{ env.ANCHOR_VERSION }}
        avm use ${{ env.ANCHOR_VERSION }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: program-build
        path: target/deploy/
    
    - name: Deploy to devnet
      run: |
        anchor deploy --provider.cluster devnet
      env:
        ANCHOR_WALLET: ${{ secrets.DEVNET_WALLET }}
        ANCHOR_PROVIDER_URL: https://api.devnet.solana.com

  notify:
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: always()
    
    steps:
    - name: Notify on failure
      if: failure()
      run: |
        echo "One or more jobs failed"
        # Add notification logic here (Slack, Discord, etc.)
    
    - name: Notify on success
      if: success()
      run: |
        echo "All jobs completed successfully"
        # Add notification logic here (Slack, Discord, etc.)
